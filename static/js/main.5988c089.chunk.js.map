{"version":3,"sources":["App/App.jsx","serviceWorker.js","index.jsx","App/assets/profile.jpeg","App/assets/profile_2.png"],"names":["App","useMediaQuery","query","react_default","a","createElement","Fragment","profilePic","id","className","src","alt","onMouseOver","e","profilePicHover","currentTarget","onMouseOut","lib_default","symbol","label","target","type","href","uil_github_alt","size","color","uil_linkedin_alt","uil_file_alt","uil_envelope_edit","uil_skype_alt","uil_whatsapp","Boolean","window","location","hostname","match","RenderApp","src_App_App","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+TAoFeA,MAvEf,WASE,OAR0BC,wBAAc,CACtCC,MAAO,wBAEWD,wBAAc,CAAEC,MAAO,wBAClBD,wBAAc,CAAEC,MAAO,wBAC7BD,wBAAc,CAAEC,MAAO,4BACzBD,wBAAc,CAAEC,MAAO,4BAGtCC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIC,KACAJ,EAAAC,EAAAC,cAAA,OAAKG,GAAG,MAAMC,UAAU,OACtBN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBAEbN,EAAAC,EAAAC,cAAA,WAASI,UAAU,kBACjBN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACbN,EAAAC,EAAAC,cAAA,OACEK,IAAKH,IACLE,UAAU,SACVE,IAAI,UACJC,YAAa,SAACC,GACZC,MAAoBD,EAAEE,cAAcL,IAAMI,MAE5CE,WAAY,SAACH,GACXN,MAAeM,EAAEE,cAAcL,IAAMH,SAM3CJ,EAAAC,EAAAC,cAAA,MAAII,UAAU,QAAd,UAGFN,EAAAC,EAAAC,cAAA,WAASI,UAAU,eACjBN,EAAAC,EAAAC,cAAA,0CAEEF,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAOc,OAAO,iCAAQC,MAAM,WAIhChB,EAAAC,EAAAC,cAAA,WAASI,UAAU,gBACjBN,EAAAC,EAAAC,cAAA,KAAGe,OAAO,SAASC,KAAK,SAASC,KAAK,0BACpCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAcC,KAAK,KAAKC,MAAM,UAAUN,MAAM,YAEhDhB,EAAAC,EAAAC,cAAA,KAAGe,OAAO,SAASC,KAAK,SAASC,KAAK,0BACpCnB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAgBF,KAAK,KAAKC,MAAM,aAElCtB,EAAAC,EAAAC,cAAA,KAAGe,OAAO,SAASC,KAAK,SAASC,KAAK,0BACpCnB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAYH,KAAK,KAAKC,MAAM,aAE9BtB,EAAAC,EAAAC,cAAA,KAAGe,OAAO,SAASC,KAAK,SAASC,KAAK,0BACpCnB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBJ,KAAK,KAAKC,MAAM,aAEnCtB,EAAAC,EAAAC,cAAA,KAAGe,OAAO,SAASC,KAAK,SAASC,KAAK,0BACpCnB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAaL,KAAK,KAAKC,MAAM,aAE/BtB,EAAAC,EAAAC,cAAA,KAAGe,OAAO,SAASC,KAAK,SAASC,KAAK,0BACpCnB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAaN,KAAK,KAAKC,MAAM,kBC3DzBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,SAASC,IACP,OACIjC,EAAAC,EAAAC,cAACgC,EAAD,MAINC,iBAAOnC,EAAAC,EAAAC,cAAC+B,EAAD,MAAeG,SAASC,cAAc,UDqHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.5988c089.chunk.js","sourcesContent":["import React from 'react'\nimport { useMediaQuery } from 'react-responsive'\nimport Emoji from 'a11y-react-emoji'\nimport { UilGithubAlt } from '@iconscout/react-unicons'\nimport { UilLinkedinAlt } from '@iconscout/react-unicons'\nimport { UilFileAlt } from '@iconscout/react-unicons'\nimport { UilEnvelopeEdit } from '@iconscout/react-unicons'\nimport { UilSkypeAlt } from '@iconscout/react-unicons'\nimport { UilWhatsapp } from '@iconscout/react-unicons'\nimport profilePic from './assets/profile.jpeg'\nimport profilePicHover from './assets/profile_2.png'\nimport './App.css'\n\nfunction App() {\n  const isDesktopOrLaptop = useMediaQuery({\n    query: '(min-width: 1224px)'\n  })\n  const isBigScreen = useMediaQuery({ query: '(min-width: 1824px)' })\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' })\n  const isPortrait = useMediaQuery({ query: '(orientation: portrait)' })\n  const isRetina = useMediaQuery({ query: '(min-resolution: 2dppx)' })\n\n  return (\n    <>\n      { profilePic &&\n        <div id=\"App\" className=\"App\">\n          <div className=\"content-wrapper\">\n\n            <section className=\"selfie-content\">\n              <div className=\"img-wrapper\">\n                <img\n                  src={profilePic}\n                  className=\"selfie\"\n                  alt=\"Profile\"\n                  onMouseOver={(e) => {\n                    profilePicHover && (e.currentTarget.src = profilePicHover);\n                  }}\n                  onMouseOut={(e) => {\n                    profilePic && (e.currentTarget.src = profilePic);\n                  }}\n                >\n\n                </img>\n              </div>\n              <h2 className=\"name\">David</h2>\n            </section>\n\n            <section className=\"bio-content\">\n              <p>\n                I make content for the web&nbsp;\n                <Emoji symbol=\"👨‍💻\" label=\"tech\" />\n              </p>\n            </section>\n\n            <section className=\"social-icons\">\n              <a target=\"_blank\" type=\"button\" href=\"http://www.example.com\">\n                <UilGithubAlt size=\"20\" color=\"#30475e\" label=\"github\"/>\n              </a>\n              <a target=\"_blank\" type=\"button\" href=\"http://www.example.com\">\n                <UilLinkedinAlt size=\"20\" color=\"#30475e\" />\n              </a>\n              <a target=\"_blank\" type=\"button\" href=\"http://www.example.com\">\n                <UilFileAlt size=\"20\" color=\"#30475e\" />\n              </a>\n              <a target=\"_blank\" type=\"button\" href=\"http://www.example.com\">\n                <UilEnvelopeEdit size=\"20\" color=\"#30475e\" />\n              </a>\n              <a target=\"_blank\" type=\"button\" href=\"http://www.example.com\">\n                <UilSkypeAlt size=\"20\" color=\"#30475e\" />\n              </a>\n              <a target=\"_blank\" type=\"button\" href=\"http://www.example.com\">\n                <UilWhatsapp size=\"20\" color=\"#30475e\" />\n              </a>\n            </section>\n\n          </div>\n        </div>\n      }\n    </>\n  );\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction RenderApp() {\n  return (\n      <App />\n  );\n}\n\nrender(<RenderApp />, document.querySelector('#root'));\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.61882599.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/profile_2.9d8e0cda.png\";"],"sourceRoot":""}