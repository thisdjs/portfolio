{"version":3,"sources":["App/Components/AppNavBar.jsx","App/Components/StyledSection.jsx","App/App.jsx","serviceWorker.js","index.jsx"],"names":["withStyles","theme","grow","flexGrow","menuButton","marginRight","toolbar","mixins","props","classes","children","console","log","window","innerWidth","react_default","a","createElement","Fragment","AppBar_default","position","color","style","boxShadow","className","Toolbar_default","Typography_default","variant","concat","cursor","Box","Button_default","innerHeight","StyledSection","App","this","id","Components_AppNavBar","lib","index_es","container","spacing","margin","item","xs","sm","textAlign","height","src","alt","onClick","speechSynthesis","speak","SpeechSynthesisUtterance","open","dist_index_es","borderWidth","borderColour","borderType","backgroundColor","Component","Boolean","location","hostname","match","createMuiTheme","palette","primary","main","secondary","light","render","styles","src_App_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a29ffbdc.chunk.js","sourcesContent":["\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { unstable_Box as Box } from '@material-ui/core/Box'\nimport { withStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport { IconButton } from '@material-ui/core'\n\nconst styles = theme => ({\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: 20,\n  },\n  toolbar: theme.mixins.toolbar,\n})\n\nfunction AppNavBar(props) {\n  const { classes, children } = props\n  console.log(window.innerWidth)\n\n  return (\n    <>\n    <AppBar position=\"fixed\" color=\"secondary\"\n      style={{boxShadow:\"initial\"}} \n      className=\"animated slideInDown delay-1s\">\n      <Toolbar >\n        <Typography variant=\"h4\" color=\"inherit\" className={`${classes.menuButton}`} style={{cursor: \"pointer\"}}>\n          DS\n        </Typography>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}></Typography> \n        <Box >\n          <Button color=\"primary\"><b>Projects</b></Button>\n          {/* <Button color=\"primary\">Contacts</Button> */}\n        </Box>\n      </Toolbar>\n    </AppBar>\n    { window.innerWidth <= 600 || window.innerHeight <= 450 ? <div className={classes.toolbar}/> : null }\n    {children}\n    </>\n  );\n}\n\nAppNavBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(AppNavBar)\n\n","import React from 'react'\n\nexport default function StyledSection(props) {\n\n    const {children} = props\n\n    return(\n        <div className=\"section\">\n            <div className=\"section-container\"> \n                <div className=\"section-content\"> \n                    {children}\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react'\nimport './App.css'\nimport AppNavBar from \"./Components/AppNavBar\"\nimport { Grid, Typography, IconButton, Paper } from '@material-ui/core'\nimport BorderWrapper from 'react-border-wrapper'\nimport { FullPage, Slide } from 'react-full-page';\nimport StyledSection from './Components/StyledSection'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst styles = theme => ({\n    toolbar: theme.mixins.toolbar,\n})\nclass App extends Component { \n\n  \n  render() {\n    const {classes} = this.props\n\n    return (\n      <div id=\"App\" className=\"App\">\n\n        <AppNavBar>\n\n          <FullPage>\n            <Slide>\n              <StyledSection>\n                <Grid container spacing={32} style={{margin:\"0px\"}}>\n                    <Grid item xs={12} sm={4}>\n                      <Grid item xs style={{textAlign:\"center\", /*padding:\"10px\"*/}}>\n                        <img className=\"avatar\" height={\"150px\"} src=\"profilePic.jpg\" alt=\"profile\" \n                          onClick={()=>speechSynthesis.speak(new SpeechSynthesisUtterance('I like coffe'))}>\n                        </img>\n                      </Grid>\n                      <Grid item xs style={{textAlign:\"center\" /*, padding:\"10px\"*/}}>\n                        <IconButton color=\"inherit\"  onClick={() => window.open(\"https://github.com/thisdjs\")}>\n                          <span \n                            className=\"fab fa-github\" \n                            style={{color:\"#282c34\", cursor: \"pointer\"}}>\n                          </span>\n                        </IconButton>\n                        <IconButton color=\"inherit\" onClick={() => console.log(\"clicked\")}>\n                          <span \n                            className=\"fab fa-linkedin\" \n                            style={{color:\"#282c34\", cursor: \"pointer\"}}>\n                          </span>\n                        </IconButton>\n                        <IconButton color=\"inherit\" onClick={() => console.log(\"clicked\")}>\n                          <span \n                            className=\"fab fa-skype\" \n                            style={{color:\"#282c34\", cursor: \"pointer\"}}>\n                          </span>\n                        </IconButton>\n                        <IconButton color=\"inherit\" onClick={() => console.log(\"clicked\")}>\n                          <span \n                            className=\"fab fa-gitlab\" \n                            style={{color:\"#282c34\", cursor: \"pointer\"}}>\n                          </span>\n                        </IconButton>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={12} sm={8}>\n                      <div className=\"texts\">\n                        <BorderWrapper borderWidth=\"2px\" borderColour=\"#22C5EE\" borderType=\"outset\">\n                          <Typography variant=\"h5\">Hello!! ðŸ‘‹</Typography>\n                          <hr/>\n                          <Typography variant=\"subtitle1\"> \n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                          </Typography>\n                        </BorderWrapper>\n                      </div>\n                    </Grid>\n                </Grid> \n              </StyledSection>\n            </Slide>\n            \n            <Slide style={{backgroundColor:\"blue\"}}>\n              <StyledSection>\n                <Grid container spacing={32} style={{margin:\"0px\"}}>\n                  <h1>tecnologies</h1>\n                  <img style={{height:\"250px\"}} \n                    src=\"https://images.unsplash.com/photo-1556596768-6d27210a5ee2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1489&q=80\">\n                  </img>\n                </Grid>\n                {/* <div class=\"LI-profile-badge\"  \n                  data-version=\"v1\" \n                  data-size=\"medium\" \n                  data-locale=\"en_US\" \n                  data-type=\"horizontal\" \n                  data-theme=\"dark\" \n                  data-vanity=\"david-j-santos\">                  \n                  <a \n                    href='https://pt.linkedin.com/in/david-j-santos?trk=profile-badge'\n                    target=\"_blank\">\n                      David Santos\n                  </a>\n                </div> */}\n              </StyledSection>\n            </Slide>\n          </FullPage>\n\n        </AppNavBar>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// const styles = (theme) => ({\n//   toolbar: theme.mixins.toolbar,\n// });\n\n// const App = (props) => {\n//   const { classes } = props;\n\n//   return (\n//     <div>\n//       <AppBar color=\"primary\" position=\"fixed\">\n//         <Toolbar>\n//           <Typography color=\"inherit\" type=\"title\">\n//             My Title\n//           </Typography>\n//         </Toolbar>\n//       </AppBar>\n//       <Paper>\n//         <div className={classes.toolbar} />\n//         MyContent will be shifted downwards by the div above. If you remove \n//         the div, your content will disappear under the app bar.\n//       </Paper>\n//     </div>\n//   );\n// }\n\n// export default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core';\n\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n        // light: will be calculated from palette.primary.main,\n        main: '#22C5EE',\n        // dark: will be calculated from palette.primary.main,\n        // contrastText: will be calculated to contrast with palette.primary.main\n      },\n      secondary: {\n        light: '#ffffff',\n        main: '#ffffff',\n        // dark: will be calculated from palette.secondary.main,\n        // contrastText: '#ffcc00',\n      },\n      // error: will use the default color\n    },\n  });\n\nfunction RenderApp() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <App />\n    </MuiThemeProvider>\n  );\n}\n\nrender(<RenderApp />, document.querySelector('#root'));\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}